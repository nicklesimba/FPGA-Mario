module goomba ( input        Clk,                // 50 MHz clock
                             Reset,              // Active-high reset signal
                             frame_clk,          // The clock indicating a new frame (~60Hz)
               input [9:0]   DrawX, DrawY,       // Current pixel coordinates
					input [9:0]   startX, startY,	    // initial location
					input logic   is_ball,				 // mario's position
               output logic  is_goomba,            // Whether current pixel belongs to Goomba or background
					output logic  [8:0] goomba_address,// outputs mario's address for sprite drawing
              );

	parameter [9:0] Goomba_X_Min = 10'd0;       // Leftmost point on the X axis
   parameter [9:0] Goomba_X_Max = 10'd639;     // Rightmost point on the X axis
   parameter [9:0] Goomba_Y_Min = 10'd0;       // Topmost point on the Y axis
   parameter [9:0] Goomba_Y_Max = 10'd479;     // Bottommost point on the Y axis
   parameter [9:0] Goomba_X_Step = 10'd1;      // Step size on the X axis
//   parameter [9:0] Goomba_Y_Step = 10'd2;      // Step size on the Y axis
   parameter [9:0] Goomba_Size = 10'd10;        // Goomba size
    
   
	// States
	logic [9:0] Goomba_X_Pos, Goomba_Y_Pos, Goomba_Y_Vel, is_alive;
   
	// Next States
	logic [9:0] Goomba_X_Pos_in, Goomba_Y_Pos_in, Goomba_Y_Vel_in, is_alive_in;
	
	// Misc.
	logic [9:0] Goomba_X_Pos_in_temp, Goomba_Y_Pos_in_temp;
		
	// collision - gravity
	wall down_collision(.DrawX(Goomba_X_Pos_in), .DrawY(Goomba_Y_Pos_in + Goomba_Size + 1), .RoomNum(2'b0), .is_wall(is_wall_down));
	wall down_right_collision(.DrawX(Goomba_X_Pos_in + 7*Goomba_Size/10 + 1), .DrawY(Goomba_Y_Pos_in + Goomba_Size + 1), .RoomNum(2'b0), .is_wall(is_wall_down_right));
	wall down_left_collision(.DrawX(Goomba_X_Pos_in - 7*Goomba_Size/10 - 1), .DrawY(Goomba_Y_Pos_in + Goomba_Size + 1), .RoomNum(2'b0), .is_wall(is_wall_down_left));
	
	// collision checks - gravity 
	logic is_wall_down, is_wall_down_left, is_wall_down_right;
	
	// collision checks - pushing back out
	wall right_collision_pushback(.DrawX(Goomba_X_Pos_in_temp + Goomba_Size), .DrawY(Goomba_Y_Pos), .RoomNum(2'b0), .is_wall(is_wall_right_pushback));
	wall left_collision_pushback(.DrawX(Goomba_X_Pos_in_temp - Goomba_Size), .DrawY(Goomba_Y_Pos), .RoomNum(2'b0), .is_wall(is_wall_left_pushback));
	wall up_collision_pushback(.DrawX(Goomba_X_Pos), .DrawY(Goomba_Y_Pos_in_temp - Goomba_Size), .RoomNum(2'b0), .is_wall(is_wall_up_pushback));
	wall down_collision_pushback(.DrawX(Goomba_X_Pos), .DrawY(Goomba_Y_Pos_in_temp + Goomba_Size), .RoomNum(2'b0), .is_wall(is_wall_down_pushback));
	wall up_left_collision_pushback(.DrawX(Goomba_X_Pos_in_temp - Goomba_Size), .DrawY(Goomba_Y_Pos_in_temp - Goomba_Size), .RoomNum(2'b0), .is_wall(is_wall_up_left_pushback));
	wall down_left_collision_pushback(.DrawX(Goomba_X_Pos_in_temp - Goomba_Size), .DrawY(Goomba_Y_Pos_in_temp + Goomba_Size), .RoomNum(2'b0), .is_wall(is_wall_down_left_pushback));
	wall up_right_collision_pushback(.DrawX(Goomba_X_Pos_in_temp + Goomba_Size), .DrawY(Goomba_Y_Pos_in_temp - Goomba_Size), .RoomNum(2'b0), .is_wall(is_wall_up_right_pushback));
	wall down_right_collision_pushback(.DrawX(Goomba_X_Pos_in_temp + Goomba_Size), .DrawY(Goomba_Y_Pos_in_temp + Goomba_Size), .RoomNum(2'b0), .is_wall(is_wall_down_right_pushback));
	
	// collision checks - pushback variables
	logic is_wall_right_pushback, is_wall_left_pushback, is_wall_down_pushback, is_wall_up_pushback, is_wall_up_left_pushback, is_wall_up_right_pushback, is_wall_down_left_pushback, is_wall_down_right_pushback;

   //////// Do not modify the always_ff blocks. ////////
   // Detect rising edge of frame_clk
   logic frame_clk_delayed, frame_clk_rising_edge;
   always_ff @ (posedge Clk) begin
      frame_clk_delayed <= frame_clk;
		frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
   end
	 
    // Update registers
   always_ff @ (posedge Clk)
   begin
		if (Reset)
      begin
			Goomba_X_Pos <= Goomba_X_Center;
         Goomba_Y_Pos <= Goomba_Y_Center;
         Goomba_Y_Vel <= 10'd0;
			Clk_counter <= 10'd0;
			is_right <= 1'b1;
			on_ground <= on_ground_in;
			is_walking <= 1'b0;
			walk_num <= 3'b0;
		end
      else
      begin
			Goomba_X_Pos <= Goomba_X_Pos_in;
         Goomba_Y_Pos <= Goomba_Y_Pos_in;
			Goomba_Y_Vel <= Goomba_Y_Vel_in;
			is_right <= is_right_in;
			on_ground <= on_ground_in;
			is_walking <= is_walking_in;
			walk_num <= walk_num_in;
			if (Clk_counter > 1000)
				Clk_counter <= 0;
			else
			begin
				if (frame_clk_rising_edge)
					Clk_counter++;
			end
		end
	end
   //////// Do not modify the always_ff blocks. ////////
    
   // You need to modify always_comb block.
   always_comb
   begin
		// By default, position unchanged and velocity at 0
      Goomba_X_Pos_in = Goomba_X_Pos;
      Goomba_Y_Pos_in = Goomba_Y_Pos;
		Goomba_X_Pos_in_temp = Goomba_X_Pos;
		Goomba_Y_Pos_in_temp = Goomba_Y_Pos;
//      Goomba_X_Vel_in = 10'd0;
		Goomba_Y_Vel_in = Goomba_Y_Vel;
		is_right_in = is_right;
		on_ground_in = on_ground;
		is_walking_in = is_walking;
		walk_num_in = walk_num;
		
		// Update position and motion only at rising edge of frame clock
      if (frame_clk_rising_edge)
      begin
			Goomba_X_Pos_in = Goomba_X_Pos;
			Goomba_Y_Pos_in = Goomba_Y_Pos + Goomba_Y_Vel;
			Goomba_X_Pos_in_temp = Goomba_X_Pos;
			Goomba_Y_Pos_in_temp = Goomba_Y_Pos;
			is_right_in = is_right;
			on_ground_in = on_ground;
			is_walking_in = 1'b0;
			walk_num_in = 3'd0;

//			if (Clk_counter % 200 == 0)
//			begin
//				if (is_walking == 1'b1)
//				begin
//					if (walk_num == 3'd0)
//						walk_num_in = 3'd1;
//					else if (walk_num < 3'd7)
//						walk_num_in = walk_num + 3'd1;
//					else if (walk_num == 3'd7)
//						walk_num_in = 3'd1;
//				end
//				else
//					walk_num_in = 3'd0;
//			end
			
			if (Clk_counter % 10 == 0)
			begin
				if (Goomba_Y_Vel == -10'd4) // the reason gravity here is so jank is probably because of some 2's complement shenanigans
					Goomba_Y_Vel_in = -10'd3; // where adding 1 alone won't fix it so i need these shits (probably bc 
				else if (Goomba_Y_Vel == -10'd3)
					Goomba_Y_Vel_in = -10'd1;
				else if (Goomba_Y_Vel == -10'd1)
					Goomba_Y_Vel_in = 10'd0;
				else if (Goomba_Y_Vel < 10'd4)
				begin
					Goomba_Y_Vel_in = Goomba_Y_Vel + 10'd2; // we aren't touching the ground, let gravity run its course
					on_ground_in = 1'b0;
				end
				else
					Goomba_Y_Vel_in = Goomba_Y_Vel;
			end
			
			else
			begin
				Goomba_Y_Vel_in = Goomba_Y_Vel;
			end
			
			// gravity logic here					
			// jumping
			if (is_wall_down == 1'b1 || is_wall_down_left == 1'b1 || is_wall_down_right == 1'b1) // this means we are touching the ground and we're allowed to jump
			begin
				Goomba_Y_Vel_in = 10'd0; // we are allowed to jump but W hasn't been pressed, velocity is 0
				on_ground_in = 1'b1;
				if (a_on == 1'b1 || d_on == 1'b1)
					is_walking_in = 1'b1;
			end
								
			// pushback
			Goomba_Y_Pos_in_temp = Goomba_Y_Pos + Goomba_Y_Vel;
			if (is_wall_up_pushback == 1'b1 || is_wall_up_left_pushback == 1'b1 || is_wall_up_right_pushback == 1'b1)
			begin
				Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp + (20 - (Goomba_Y_Pos_in_temp % 20)) + Goomba_Size) - 20;
				Goomba_Y_Vel_in = 10'd0;
			end
			else if (is_wall_down_pushback == 1'b1 || is_wall_down_left_pushback == 1'b1 || is_wall_down_right_pushback == 1'b1)
			begin
				Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp - (Goomba_Y_Pos_in_temp % 20) - 1 - Goomba_Size) + 20;
			end
		
			// key logic - WASD :D
			if (w_on == 1'b1)
			begin
				// jumping
				on_ground_in = 1'b0;
				
				if (is_wall_down == 1'b1 || is_wall_down_left == 1'b1 || is_wall_down_right == 1'b1) // this means we are touching the ground and we're allowed to jump
				begin
					Goomba_Y_Vel_in = -10'd4; // set an initial jump velocity
				end
				
				// pushback
				Goomba_Y_Pos_in_temp = Goomba_Y_Pos + Goomba_Y_Vel;
				if (is_wall_up_pushback == 1'b1 || is_wall_up_left_pushback == 1'b1 || is_wall_up_right_pushback == 1'b1)
				begin
					Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp + (20 - (Goomba_Y_Pos_in_temp % 20)) + Goomba_Size) - 20;
					Goomba_Y_Vel_in = 10'd0;	
				end
				else if (is_wall_down_pushback == 1'b1 || is_wall_down_left_pushback == 1'b1 || is_wall_down_right_pushback == 1'b1)
				begin
					Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp - (Goomba_Y_Pos_in_temp % 20) - 1 - Goomba_Size) + 20;
				end
			end
			if (a_on == 1'b1)
			begin
				is_right_in = 1'b0;
				Goomba_X_Pos_in_temp = Goomba_X_Pos - Goomba_X_Step;
				if (is_wall_left_pushback == 1'b1 || is_wall_up_left_pushback == 1'b1 || is_wall_down_left_pushback == 1'b1)
				begin
					Goomba_X_Pos_in = (Goomba_X_Pos_in_temp + (20 - (Goomba_X_Pos_in_temp % 20)) + Goomba_Size) - 20;
				end
				else
				begin
					Goomba_X_Pos_in = Goomba_X_Pos - Goomba_X_Step;
				end
				
				// gravity logic here
				
				// pushback
				Goomba_Y_Pos_in_temp = Goomba_Y_Pos + Goomba_Y_Vel;
				if (is_wall_up_pushback == 1'b1 || is_wall_up_left_pushback == 1'b1 || is_wall_up_right_pushback == 1'b1)
				begin
					Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp + (20 - (Goomba_Y_Pos_in_temp % 20)) + Goomba_Size) - 20;
					Goomba_Y_Vel_in = 10'd0;
				end
				else if (is_wall_down_pushback == 1'b1 || is_wall_down_left_pushback == 1'b1 || is_wall_down_right_pushback == 1'b1)
				begin
					Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp - (Goomba_Y_Pos_in_temp % 20) - 1 - Goomba_Size) + 20;
				end
			end
//				8'h16: //S
//				begin
//					Goomba_Y_Pos_in_temp = Goomba_Y_Pos + Goomba_Y_Step;
//					if (is_wall_down_pushback == 1'b1 || is_wall_down_left_pushback == 1'b1 || is_wall_down_right_pushback == 1'b1)
//					begin
//						Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp - (Goomba_Y_Pos_in_temp % 20) - 1 - Goomba_Size) + 20;
//					end
//					else
//					begin
//						Goomba_Y_Pos_in = Goomba_Y_Pos + Goomba_Y_Step;
//					end
//				end
			if (d_on == 1'b1)
			begin
				is_right_in = 1'b1;
				Goomba_X_Pos_in_temp = Goomba_X_Pos + Goomba_X_Step;
				if (is_wall_right_pushback == 1'b1 || is_wall_up_right_pushback == 1'b1 || is_wall_down_right_pushback == 1'b1)
				begin
					Goomba_X_Pos_in = (Goomba_X_Pos_in_temp - (Goomba_X_Pos_in_temp % 20) - 1 - Goomba_Size) + 20;
				end
				else
				begin
					Goomba_X_Pos_in = Goomba_X_Pos + Goomba_X_Step;
				end
				// gravity logic here
				
				// pushback
				Goomba_Y_Pos_in_temp = Goomba_Y_Pos + Goomba_Y_Vel;
				if (is_wall_up_pushback == 1'b1 || is_wall_up_left_pushback == 1'b1 || is_wall_up_right_pushback == 1'b1)
				begin
					Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp + (20 - (Goomba_Y_Pos_in_temp % 20)) + Goomba_Size) - 20; 
					Goomba_Y_Vel_in = 10'd0;
				end
				else if (is_wall_down_pushback == 1'b1 || is_wall_down_left_pushback == 1'b1 || is_wall_down_right_pushback == 1'b1)
				begin
					Goomba_Y_Pos_in = (Goomba_Y_Pos_in_temp - (Goomba_Y_Pos_in_temp % 20) - 1 - Goomba_Size) + 20;
				end
			end
		end
	end
    
   // Compute whether the pixel corresponds to Goomba or background
   /* Since the multiplicants are required to be signed, we have to first cast them
      from logic to int (signed by default) before they are multiplied. */
   int DistX, DistY;
   assign DistX = DrawX - Goomba_X_Pos + Goomba_Size;
   assign DistY = DrawY - Goomba_Y_Pos + Goomba_Size;
	
   always_comb begin
//		if ( ( DistX*DistX + DistY*DistY) <= (Size*Size) ) 
//			is_Goomba = 1'b1;
//      else
//         is_Goomba = 1'b0;
//      /* The Goomba's (pixelated) circle is generated using the standard circle formula.  Note that while 
//         the single line is quite powerful descriptively, it causes the synthesis tool to use up three
//         of the 12 available multipliers on the chip! */
		if (DistX <= (Goomba_Size*2) && DistY <= (Goomba_Size*2) && DistX >= 10'd0 && DistY >= 10'd0)
			is_Goomba = 1'b1;
		else
			is_Goomba = 1'b0;
		if (is_Goomba == 1'b1)
		begin
			if (is_right == 1'b1)
				mario_address = DistX + DistY * 21;
			else
				if (DistX < Goomba_Size) // addition
					mario_address = (Goomba_Size - DistX + Goomba_Size) + DistY * 21;
				else if (DistX > Goomba_Size) // subtraction
					mario_address = (Goomba_Size - DistX - Goomba_Size) + DistY * 21;
				else
					mario_address = DistX + DistY * 21;
		end
		else
			mario_address = 9'b0; // don't care
	end 
	
endmodule
